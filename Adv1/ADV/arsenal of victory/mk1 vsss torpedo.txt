[Info]
Type:AdvDupe File
Creator:"Tolyzor"
Date:07/26/10
Description:"none"
Entities:4
Constraints:7
[More Information]
FileVersion:0.84
AdvDupeVersion:1.85
AdvDupeToolVersion:1.9
AdvDupeSharedVersion:1.72
SerialiserVersion:1.4
WireVersion:2137 (exported)
Time:03:40 PM
Head:391
HoldAngle:0,-100.681,0
HoldPos:13.344,-5.4356,-49.7665
StartPos:1805.36,-9691.51,704.031
[Save]
Entities:473EF028{N:0=T:473F08E8;}473EE638{S:"a"=N:255;S:"r"=N:56;S:"g"=N:63;S:"b"=N:55;}473F2268{Y:11=T:473EE638;Y:58=N:0;Y:59=N:0;}H473EEBD8{N:392=T:473F2AA8;N:393=T:473EEB78;N:391=T:473FAC98;N:390=T:473EE668;}473F09A8{Y:39=T:473F8238;}473F5028{Y:16=T:473F5058;}473F76C8{N:0;N:0;N:0;}473F4DB8{Y:11=T:473F4F98;}473F08E8{Y:37=T:473F63D8;}473F1DB8{S:"a"=N:255;S:"b"=N:0;S:"g"=N:238;S:"r"=N:255;}473F7848{Y:37=T:473FA3F8;}473EF9B8{N:0;N:0;N:0;}473F71E8{N:0=T:473EF3E8;}473EF298{Y:17=T:473EFB68;Y:18=T:473EFA18;}473EFE68{S:"a"=N:255;S:"b"=N:0;S:"g"=N:238;S:"r"=N:255;}473EDF18{N:0;N:0;N:0;}473F5B08{T:473F5BF8;T:473FAC38;}473F5E08{N:0;N:0;N:0;}473F5BF8{Y:8;Y:39;}473F2AA8{Y:1=A:-6.26053e-005,-89.9855,-90.0003;Y:3=Y:2;Y:4=N:100000;Y:5=N:0;Y:6=B:f;Y:19=T:473FA578;Y:20=B:f;Y:21=B:f;Y:23=Y:22;Y:24=N:0;Y:27=T:473F71E8;Y:29=Y:28;Y:25=V:70.4388,-5.43262,55.7058;Y:31=Y:30;Y:32=B:f;Y:33=B:t;Y:34=N:5170;Y:38=T:473F3348;}473F20B8{Y:35=B:t;Y:13=Y:36;}473F7FF8{Y:1=A:-0.00024744,-180,6.39317e-005;Y:25=V:13.3442,-5.43555,49.7664;Y:26=B:t;}473F05B8{Y:43;Y:49;Y:50;Y:43;}473EFA78{S:"a"=N:255;S:"b"=N:255;S:"g"=N:127;S:"r"=N:101;}473F44E8{Y:98=N:200;}473F6FA8{N:0;N:0;N:0;}473F2088{Y:37=T:473F20B8;}473F0AC8{Y:7=T:473F0AF8;S:"Src"=N:391;Y:9=Y:39;Y:10=V:13.5313,5.83153,6.97946;Y:11=T:473F1DB8;Y:13=Y:12;Y:14=V:-0.573486,0.563477,0.915039;Y:15=N:0;}473EF9E8{S:"a"=N:255;S:"b"=N:0;S:"g"=N:238;S:"r"=N:255;}473EF3E8{Y:1=A:-6.26053e-005,-89.9855,270;Y:25=V:70.4388,-5.43262,55.7058;Y:26=B:t;}473F6D68{Y:16=T:473F7248;}473F5058{S:"A"=T:473F60D8;}473EEB78{Y:1=A:-6.26053e-005,-89.9855,-90.0001;Y:3=Y:2;Y:4=N:100000;Y:5=N:0;Y:6=B:f;Y:19=T:473EF298;Y:20=B:f;Y:21=B:f;Y:23=Y:40;Y:24=N:0;Y:27=T:473F1E18;Y:29=Y:40;Y:25=V:53.2942,-5.43652,55.7058;Y:31=Y:30;Y:32=B:t;Y:33=B:t;Y:34=N:1;Y:38=T:473F2028;}473F6048{Y:56=S:"";}473F4F98{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}473F0A68{S:"A"=T:473F0AC8;}473EC868{Y:57=T:473F6048;Y:18=T:473F2268;Y:17=T:473F6D68;}473F0AF8{;}473F7248{;}473F84D8{;}473FAC38{Y:43;Y:43;}473FA578{Y:17=T:473F5028;Y:18=T:473F4DB8;}473EFB68{Y:16=T:473F0A68;}473F1758{Y:99=T:473F44E8;Y:18=T:473EFDA8;Y:17=T:473F02B8;}473F3348{N:0=T:473F7848;}473F48D8{Y:1=A:-6.26053e-005,-89.9855,270;Y:25=V:53.2942,-5.43652,55.7058;Y:26=B:t;}473F2028{N:0=T:473F2088;}473FAC98{Y:1=A:-0.00024744,-180,6.39317e-005;Y:31=Y:41;Y:3=Y:42;Y:44=T:473F5B08;Y:51=T:473F58F8;Y:53=Y:52;Y:55=Y:54;Y:25=V:13.3442,-5.43555,49.7664;Y:5=N:0;Y:27=T:473F5B98;Y:19=T:473EC868;Y:91=T:473F5F28;Y:38=T:473EF028;}473F63D8{Y:35=B:t;Y:13=Y:36;}473EE668{Y:92=N:100;Y:1=A:-0.000248996,180,6.38183e-005;Y:93=B:t;Y:3=Y:94;Y:95=N:0;Y:96=B:t;S:"key"=N:1;Y:97=B:f;Y:19=T:473F1758;Y:100=B:t;Y:101=N:1500;Y:21=B:f;Y:102=N:400;Y:103=B:f;Y:104=B:f;Y:27=T:473EFF28;Y:105=B:t;Y:106=B:f;Y:107=B:t;Y:108=B:f;Y:109=N:391;Y:25=V:41.4312,-5.43848,49.7664;Y:31=Y:41;Y:110=B:f;Y:111=B:f;Y:5=N:0;Y:112=N:0;}473F58F8{T:473F7F08;T:473F05B8;}473F1638{Y:1=A:5.51306,7.01948,160.08;Y:25=V:110.886,135.448,-885.042;Y:26=B:f;}473EFF28{N:0=T:473F1638;}473F60D8{Y:7=T:473F8D48;S:"Src"=N:391;Y:9=Y:8;Y:10=V:16.0781,5.93178,5.90914;Y:11=T:473EFE68;Y:13=Y:12;Y:14=V:1.59766,-1.72168,0.915033;Y:15=N:0;}473F5B98{N:0=T:473F7FF8;}473EFEF8{S:"a"=N:255;S:"r"=N:56;S:"g"=N:63;S:"b"=N:55;}473FA3F8{Y:35=B:t;Y:13=Y:36;}473F8238{Y:7=T:473F84D8;S:"Src"=N:391;Y:9=Y:39;Y:10=V:5.8623,5.47031,8.22943;Y:11=T:473EF9E8;Y:13=Y:12;Y:14=V:-6.33862,5.32675,8.35834;Y:15=N:0;}473F02B8{Y:16=T:473F09A8;}473F1E18{N:0=T:473F48D8;}473EFA18{Y:11=T:473EFA78;}473F7F08{Y:45;Y:46;Y:47;Y:48;}473EFDA8{Y:11=T:473EFEF8;Y:58=N:0;Y:59=N:0;}473F8D48{;}473EF118{;}473F4BA8{;}473F05E8{N:0;N:0;N:0;}473F5F28{Y:60=N:0;Y:8=N:0;Y:61=N:10000;Y:62=T:473EDF18;Y:63=N:0;Y:64=N:0;Y:46=V:0,0,0;Y:65=T:473F4BA8;Y:66=N:0;Y:39=N:0;Y:67=N:0;S:"Fov"=N:0;Y:68=T:473EF118;Y:69=T:473F5E08;Y:70=N:0;Y:71=N:0;Y:72=N:0;Y:73=N:0;Y:74=N:441;Y:75=N:0;Y:76=N:0;Y:77=N:66.566669;Y:78=T:473EF9B8;Y:79=N:0;Y:80=N:3;S:"Dir"=T:473F76C8;Y:81=N:0;Y:82=N:0;Y:45=N:0;Y:83=N:0;Y:84=N:7;Y:85=T:473F6FA8;Y:86=N:0;Y:87=T:473F05E8;Y:88=N:0;Y:89=N:7;Y:48=N:0;Y:90=N:0;}
Constraints:473F7878{T:473F79C8;T:473F45D8;}473EF148{T:473F6D38;T:473F6D98;}473F8328{Y:115=T:473FABD8;Y:117=Y:118;Y:21=B:t;Y:119=N:0;}473F4968{Y:115=T:473F2508;Y:117=Y:118;Y:119=N:0;}473F7CF8{Y:113=N:393;Y:114=N:0;}473F19C8{Y:115=T:473F1A28;Y:117=Y:116;}473F2508{T:473F6708;T:473F6EB8;}H41755830{T:473F5BC8;T:473F4968;T:473F8328;T:473F96A8;T:473F3D98;T:473F6DC8;T:473F19C8;}473F6DC8{Y:115=T:473EECC8;Y:117=Y:118;Y:21=B:t;Y:119=N:0;}473F3D98{Y:115=T:473F4488;Y:117=Y:116;}473F1CC8{Y:113=N:391;Y:114=N:0;}473F96A8{Y:115=T:473EF148;Y:117=Y:116;}473F1A88{Y:113=N:392;Y:114=N:0;}473F5A78{Y:113=N:391;Y:114=N:0;}473EF1D8{Y:113=N:391;Y:114=N:0;}473FAD28{Y:113=N:392;Y:114=N:0;}473F79C8{Y:113=N:391;Y:114=N:0;}473EECC8{T:473FAD28;T:473EF1D8;}473F6708{Y:113=N:393;Y:114=N:0;}473FABD8{T:473F7CF8;T:473F0D68;}473F1A28{T:473F1A88;T:473F1CC8;}473F5BC8{Y:115=T:473F7878;Y:117=Y:116;}473F4B48{Y:113=N:393;Y:114=N:0;}473F6D38{Y:113=N:393;Y:114=N:0;}473F6D98{Y:113=N:392;Y:114=N:0;}473F45D8{Y:113=N:390;Y:114=N:0;}473F4488{T:473F4B48;T:473F5A78;}473F0D68{Y:113=N:391;Y:114=N:0;}473F6EB8{Y:113=N:392;Y:114=N:0;}
[Dict]
1:"LocalAngle"
2:"gmod_wire_thruster"
3:"Class"
4:"force_max"
5:"Skin"
6:"bidir"
7:"Path"
8:"Thrust"
9:"SrcId"
10:"SrcPos"
11:"Color"
12:"arrowire/arrowire"
13:"Material"
14:"StartPos"
15:"Width"
16:"Wires"
17:"WireDupeInfo"
18:"colour"
19:"EntityMods"
20:"sound"
21:"nocollide"
22:"bubble"
23:"uweffect"
24:"force_min"
25:"LocalPos"
26:"Frozen"
27:"PhysicsObjects"
28:"none"
29:"oweffect"
30:"models/jaanus/thruster_flat.mdl"
31:"Model"
32:"owater"
33:"uwater"
34:"force"
35:"GravityToggle"
36:"water"
37:"physprops"
38:"BoneMods"
39:"Detonate"
40:"water_huge"
41:"models/props_phx/ww2bomb.mdl"
42:"gmod_wire_expression2"
43:"NORMAL"
44:"_outputs"
45:"AttackMode"
46:"InitialDir"
47:"Screen"
48:"WaterLevel"
49:"VECTOR"
50:"WIRELINK"
51:"_inputs"
52:"MK1 VSSS Torpedo"
53:"_name"
54:"@name MK1 VSSS Torpedo€@inputs Screen:wirelink InitialDir:vector WaterLevel AttackMode# 1 = surface attack, 2 = submerged attack€@outputs Thrust Detonate €@persist Dir:vector Roll Angle AngVel:angle Axis:vector TargetDir:vector Timer€@persist AverageX AverageY TargetLock #seeker€@persist TickRate E:entity XTorque YTorque ZTorque DetTimer€@persist Resolution Range Ranger:ranger RangerX RangerY RangerZ ScreenX ScreenY ScreenCell Iterations # seeker€@persist [RangerDir Colour]:vector # seeker€@persist [TargetXArray TargetYArray]:array TargetPriority TargetRank Fov# seeker€@persist SeekerWidth SeekerHeight # fov stuff€@trigger €@model models/props_phx/ww2bomb.mdl€if (first() | duped()) {€    TickRate = 66.566669€    E = entity()€    E:setColor(45, 60, 45, 255)€    #####seeker#####€    Resolution = 441 # odd square number€    Range = 10000 # ranger range€    ScreenCell = 3€    TargetPriority = TargetRank = 7€    #####seeker#####€    exit()€    }€if (~AttackMode) {€    if (AttackMode == 1) {€        Fov = 55 #degrees €        SeekerWidth = sqrt(Resolution) * 3€        SeekerHeight = sqrt(Resolution) / 3€    }€    elseif (AttackMode == 2) {€        Fov = 50 #degrees€        SeekerWidth = sqrt(Resolution)€        SeekerHeight = sqrt(Resolution)€    }€    Screen[1048574] = 1 # clear screen €    Screen[1048572] = SeekerWidth€    Screen[1048573] = SeekerWidth€    Screen[1048569] = 1 # vector rgb colourmode€    RangerX = int(SeekerWidth / 2)€    RangerY = int(-SeekerHeight / 2)€    RangerZ = RangerX / tan(Fov / 2)€}€if (AttackMode) {€    runOnTick(1)€    Thrust = 1€    Timer++€    Dir = E:angles():forward()€    if (AttackMode == 1) {€        if (Timer == 1) {TargetDir = Dir} €        elseif (Timer > 100 & !TargetLock) {TargetDir = Dir:setZ(clamp((WaterLevel - 300 - E:pos():z()) / 1500, -0.5, 0.5)):normalized()} €        # after 300 ticks pitch to get to cruise depth of 50 then level out€    } elseif (AttackMode == 2) {€    if (Timer == 1) {TargetDir = Dir} €    #elseif (Timer == 200 & InitialDir) {TargetDir = InitialDir} # after 200 go to user inputted bearing€    #elseif (Timer > 800) {TargetDir = } # spiral search pattern€    }€    if (Timer > 300 & perf()) { # arm seeker system #############################################################€        €      €        for (Iterations = 0, 20) {€            RangerDir = E:toWorldAxis(vec(RangerZ, RangerX, -RangerY):normalized())€            Ranger = rangerOffset(Range, entity():toWorld(vec(32, 0, 5.95)), RangerDir)€                €            ############ Target priorities ##################€            if (!Ranger:entity() | Ranger:position():z() > WaterLevel) {TargetPriority = 7, Colour = vec(0, 0, 0)} # ignore if ranger is hitting nothing or something above the water€            elseif (Ranger:entity():isPlayer()) {TargetPriority = 4, Colour = vec(0, 255, 0)}€            elseif (Ranger:entity():isFrozen()) {TargetPriority = 6, Colour = vec(100, 100, 100)}€            elseif (Ranger:entity():isConstrained()) { €                TargetPriority = 2, Colour = vec(255, 0, 255)€                if (Ranger:entity():vel()) {TargetPriority = 1, Colour = vec(255, 0, 0)}# should check if vel is less than torpedo vel?€            } €            elseif (Ranger:entity():vel()) {TargetPriority = 3, Colour = vec(255, 100, 100)}€            else {TargetPriority = 5, Colour = vec(255, 255, 255)}€            €            if (TargetPriority == TargetRank & TargetPriority != 7) {€                TargetXArray:pushNumber(ScreenX)# save x value to TargetXArray€                TargetYArray:pushNumber(ScreenY)# save y value to TargetYArray€            } elseif (TargetPriority < TargetRank) {€                TargetRank = TargetPriority€                TargetXArray = array()€                TargetYArray = array()€                TargetXArray:pushNumber(ScreenX)# save x value to TargetXArray€                TargetYArray:pushNumber(ScreenY)# save y value to TargetYArray€            }€            #################################################€            Screen[ScreenCell, vector] = Colour€        €            RangerX--€            ScreenX++€            if (RangerX < -SeekerWidth / 2) {€            RangerX = int(SeekerWidth / 2)€            ScreenX = 0€            RangerY++€            ScreenY++€            }€            if (RangerY > SeekerHeight / 2) {€            RangerX = int(SeekerWidth / 2)€            RangerY = int(-SeekerHeight / 2)€            ScreenX = ScreenY = 0€            if (TargetXArray:count()) {€                TargetLock = 1€                AverageX = round(TargetXArray:average())€                AverageY = round(TargetYArray:average())€                Screen[(AverageX + SeekerWidth * AverageY) * 3, vector] = vec(0, 0, 255) # target point is blue€                TargetDir = E:toWorldAxis(vec(RangerZ, -(AverageX - SeekerWidth / 2) , -(AverageY - SeekerHeight / 2)):normalized())€            } else {TargetLock = 0}€        €            TargetPriority = TargetRank = 7 # where 7 is lowest priority€            TargetXArray = array()€            TargetYArray = array()€            }€            ScreenCell = (ScreenX + SeekerWidth * ScreenY) * 3 €        }€        if (findInSphere(E:pos(), 100) > 3) {Detonate = 1}# detonate when there are more entities than just the torpedo€    }##################################################################################################€    ######### guidance control ###########€    Angle = acos(Dir:dot(TargetDir))€    Axis = E:toLocalAxis(Dir:cross(TargetDir):normalized())€        €    AngVel = E:angVel()€    XTorque = (-E:angles():roll() - AngVel:roll() * 0.4) * 4000€    YTorque = Angle * Axis:y() * 120000 - AngVel:pitch() * 105000€    ZTorque = Angle * Axis:z() * 120000 - AngVel:yaw() * 105000€    €    E:applyTorque(vec(XTorque, YTorque, ZTorque) / TickRate) # guidance physics€}€if (Detonate) {€    DetTimer++€    if (DetTimer > 30) {selfDestructAll()}€    }€€# made by Tolyzor, released @ the wiremod forums.€€# Please feel free to use part or all of the guidance control code,€# note for non-submerged aplications the constants will need reducing by 100x or so€€# At this time I would rather not have the video-scanning-seeker or target priority code modified or used elsewhere€# as it is still very much a work in progress (hence the messyness of the code).€# I shall release an optimised version which I'd be happy to share in the future.€€"
55:"_original"
56:"MaterialOverride"
57:"material"
58:"RenderMode"
59:"RenderFX"
60:"Iterations"
61:"Range"
62:"Axis"
63:"SeekerHeight"
64:"DetTimer"
65:"TargetYArray"
66:"SeekerWidth"
67:"AverageX"
68:"TargetXArray"
69:"TargetDir"
70:"AverageY"
71:"ScreenX"
72:"TargetLock"
73:"RangerY"
74:"Resolution"
75:"Roll"
76:"Angle"
77:"TickRate"
78:"AngVel"
79:"RangerX"
80:"ScreenCell"
81:"YTorque"
82:"ZTorque"
83:"XTorque"
84:"TargetPriority"
85:"Colour"
86:"ScreenY"
87:"RangerDir"
88:"Timer"
89:"TargetRank"
90:"RangerZ"
91:"_vars"
92:"maxhealth"
93:"doblastdamage"
94:"gmod_wire_explosive"
95:"delayreloadtime"
96:"explosionproof"
97:"removeafter"
98:"Mass"
99:"MassMod"
100:"fireeffect"
101:"damage"
102:"radius"
103:"resetatexplode"
104:"invisibleatzero"
105:"explodeatzero"
106:"fallproof"
107:"bulletproof"
108:"affectother"
109:"SavedParentIdx"
110:"notaffected"
111:"coloreffect"
112:"delaytime"
113:"Index"
114:"Bone"
115:"Entity"
116:"NoCollide"
117:"Type"
118:"Weld"
119:"forcelimit"
Saved:148